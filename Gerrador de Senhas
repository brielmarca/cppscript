#include <iostream>
#include <fstream>
#include <random>
#include <string>

using namespace std;

// Função para gerar uma senha segura
string gerarSenha(int comprimento, bool incluirMaiusculas, bool incluirNumeros, bool incluirEspeciais) {
    const string minusculas = "abcdefghijklmnopqrstuvwxyz";
    const string maiusculas = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const string numeros = "0123456789";
    const string especiais = "!@#$%^&*()-_=+[]{}|;:,.<>?";
    string caracteresDisponiveis = minusculas;

    if (incluirMaiusculas) caracteresDisponiveis += maiusculas;
    if (incluirNumeros) caracteresDisponiveis += numeros;
    if (incluirEspeciais) caracteresDisponiveis += especiais;

    if (caracteresDisponiveis.empty()) {
        throw invalid_argument("Nenhum conjunto de caracteres foi selecionado para gerar a senha.");
    }

    string senha;
    random_device rd;
    mt19937 gerador(rd());
    uniform_int_distribution<> distrib(0, caracteresDisponiveis.size() - 1);

    for (int i = 0; i < comprimento; ++i) {
        senha += caracteresDisponiveis[distrib(gerador)];
    }

    return senha;
}

// Função para "encriptar" uma senha (simulação simples)
string encriptarSenha(const string& senha) {
    string senhaEncriptada;
    for (char c : senha) {
        senhaEncriptada += static_cast<char>(c + 3); // Desloca o caractere 3 posições no código ASCII
    }
    return senhaEncriptada;
}

// Função para salvar a senha em um arquivo
void salvarSenha(const string& senha, const string& nomeArquivo) {
    ofstream arquivo(nomeArquivo, ios::app); // Abre o arquivo no modo de adição
    if (arquivo.is_open()) {
        arquivo << senha << endl;
        arquivo.close();
        cout << "Senha salva com sucesso no arquivo " << nomeArquivo << "!" << endl;
    } else {
        cerr << "Erro ao abrir o arquivo " << nomeArquivo << "!" << endl;
    }
}

int main() {
    try {
        int comprimento;
        bool incluirMaiusculas, incluirNumeros, incluirEspeciais;
        string nomeArquivo;

        // Entrada do usuário
        cout << "Digite o comprimento da senha: ";
        cin >> comprimento;
        if (comprimento <= 0) {
            throw invalid_argument("O comprimento da senha deve ser maior que zero.");
        }

        cout << "Incluir letras maiúsculas? (1 para sim, 0 para não): ";
        cin >> incluirMaiusculas;

        cout << "Incluir números? (1 para sim, 0 para não): ";
        cin >> incluirNumeros;

        cout << "Incluir caracteres especiais? (1 para sim, 0 para não): ";
        cin >> incluirEspeciais;

        cout << "Digite o nome do arquivo para salvar a senha: ";
        cin >> nomeArquivo;

        // Gerar e exibir a senha
        string senhaGerada = gerarSenha(comprimento, incluirMaiusculas, incluirNumeros, incluirEspeciais);
        cout << "Senha gerada: " << senhaGerada << endl;

        // Encriptar a senha
        string senhaEncriptada = encriptarSenha(senhaGerada);
        cout << "Senha encriptada: " << senhaEncriptada << endl;

        // Salvar a senha encriptada no arquivo
        salvarSenha(senhaEncriptada, nomeArquivo);

    } catch (const exception& e) {
        cerr << "Erro: " << e.what() << endl;
    }

    return 0;
}
